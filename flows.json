[
    {
        "id": "16c561d0bd2db4f4",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "41ec38ad59c0cf49",
        "type": "tab",
        "label": "Flow 2",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "a053172554a6aedb",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.250.1:4840",
        "secpol": "None",
        "secmode": "None",
        "none": false,
        "login": true,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "8183cda1929e83aa",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "10584f864ba3765e",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "7b9307d1947a13f0",
        "type": "ui_group",
        "name": "Tank Levels",
        "tab": "8183cda1929e83aa",
        "order": 1,
        "disp": true,
        "width": "24",
        "collapse": false
    },
    {
        "id": "581cf3edde4d02e5",
        "type": "ui_group",
        "name": "Temperature Readouts",
        "tab": "8183cda1929e83aa",
        "order": 2,
        "disp": true,
        "width": "24",
        "collapse": false
    },
    {
        "id": "3342ef65ea84e0bc",
        "type": "ui_group",
        "name": "pH ReadOuts",
        "tab": "8183cda1929e83aa",
        "order": 3,
        "disp": true,
        "width": "24",
        "collapse": false
    },
    {
        "id": "701c917fb989f805",
        "type": "ui_group",
        "name": "Switch",
        "tab": "8fcb15dc6d9b8602",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "8fcb15dc6d9b8602",
        "type": "ui_tab",
        "name": "Controls",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e16e06ca.f38438",
        "type": "ui_group",
        "name": "Frame Statistics",
        "tab": "7af2d9c8.0a9148",
        "order": 2,
        "disp": true,
        "width": "6"
    },
    {
        "id": "675036dd.603328",
        "type": "ui_group",
        "name": "Frame Grab",
        "tab": "7af2d9c8.0a9148",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "7af2d9c8.0a9148",
        "type": "ui_tab",
        "name": "RTSP",
        "icon": "dashboard",
        "order": 13,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "80ae0189e474ec6e",
        "type": "comment",
        "z": "16c561d0bd2db4f4",
        "name": "Read data from PLC",
        "info": "",
        "x": 130,
        "y": 220,
        "wires": []
    },
    {
        "id": "ee3a6572681df942",
        "type": "OpcUa-Client",
        "z": "16c561d0bd2db4f4",
        "endpoint": "a053172554a6aedb",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": "500",
        "timeUnit": "ms",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 760,
        "y": 420,
        "wires": [
            [
                "e00268bdbe39dfbb"
            ]
        ]
    },
    {
        "id": "dd1d8145487cc6b6",
        "type": "inject",
        "z": "16c561d0bd2db4f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 70,
        "y": 300,
        "wires": [
            [
                "b3578a269a98ebf3",
                "0b960201cdf08554",
                "33c6fb9ca60141ee",
                "33870d5dbfab317a",
                "4dfb0f8ea148f7d7"
            ]
        ]
    },
    {
        "id": "c201dfca83113604",
        "type": "comment",
        "z": "16c561d0bd2db4f4",
        "name": "Write Data to PLC",
        "info": "There is a limited number of clients you can use.\nYou can string commands together and push into a single client.",
        "x": 130,
        "y": 1320,
        "wires": []
    },
    {
        "id": "5fc5cf3c28ed8110",
        "type": "OpcUa-Client",
        "z": "16c561d0bd2db4f4",
        "endpoint": "a053172554a6aedb",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": "500",
        "timeUnit": "ms",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 420,
        "y": 1380,
        "wires": [
            [
                "cbf391f08b4a70a7"
            ]
        ]
    },
    {
        "id": "cbf391f08b4a70a7",
        "type": "debug",
        "z": "16c561d0bd2db4f4",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 1380,
        "wires": []
    },
    {
        "id": "fa1e40127948deab",
        "type": "ui_switch",
        "z": "16c561d0bd2db4f4",
        "name": "",
        "label": "switch",
        "tooltip": "",
        "group": "701c917fb989f805",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 90,
        "y": 1380,
        "wires": [
            [
                "6bca2acab5cf3ecf"
            ]
        ]
    },
    {
        "id": "6bca2acab5cf3ecf",
        "type": "OpcUa-Item",
        "z": "16c561d0bd2db4f4",
        "item": "ns=4;s=TestBitTag",
        "datatype": "Boolean",
        "value": "",
        "name": "",
        "x": 240,
        "y": 1380,
        "wires": [
            [
                "5fc5cf3c28ed8110"
            ]
        ]
    },
    {
        "id": "b3578a269a98ebf3",
        "type": "OpcUa-Item",
        "z": "16c561d0bd2db4f4",
        "item": "ns=4;s=WashDigestion",
        "datatype": "String",
        "value": "",
        "name": "",
        "x": 240,
        "y": 300,
        "wires": [
            [
                "6883df45a9ecbd49"
            ]
        ]
    },
    {
        "id": "6883df45a9ecbd49",
        "type": "function",
        "z": "16c561d0bd2db4f4",
        "name": "assign WashDigestion to topic",
        "func": "var msg_WashDigestion = {};\nmsg_WashDigestion.topic = msg.topic;\n\n//Assigns a global variable identified by \"Topic_WashDigestion\" of value msg_WashDigestion.topic where the data type is converted to a string.\n//Don't know why it needs to be declared as a string type? Less memory assigned?\nglobal.set(\"Topic_WashDigestion\", String(msg_WashDigestion.topic)); \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 300,
        "wires": [
            [
                "ee3a6572681df942"
            ]
        ]
    },
    {
        "id": "80b357c10add4706",
        "type": "ui_chart",
        "z": "16c561d0bd2db4f4",
        "name": "",
        "group": "3342ef65ea84e0bc",
        "order": 2,
        "width": "8",
        "height": "4",
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "14",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#dd2727",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1690,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "1f7c50c5d6e7d504",
        "type": "ui_text",
        "z": "16c561d0bd2db4f4",
        "group": "3342ef65ea84e0bc",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "pH:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 1690,
        "y": 100,
        "wires": []
    },
    {
        "id": "81f1b85473dca332",
        "type": "function",
        "z": "16c561d0bd2db4f4",
        "name": "TankData Splitter",
        "func": "var pH_msg = {};\nvar temp_msg = {};\nvar l1_msg = {};\nvar l2_msg = {};\nvar l3_msg = {};\n\nvar totalOutputs = 7;\n\nconst returnArray = new Array(totalOutputs).fill(null);\n\npH_msg.payload = Math.round((msg.payload.pH) * 100) / 100;\nglobal.set(\"pH_WD\", msg.payload);\n\ntemp_msg.payload = Math.round((msg.payload.temperature) * 100) / 100;\nglobal.set(\"Temp_WD\", msg.payload);\n\nl1_msg.payload = msg.payload.level1_status;\nglobal.set(\"WD1\", l1_msg.payload);\nl2_msg.payload = msg.payload.level2_status;\nglobal.set(\"WD2\", l2_msg.payload);\nl3_msg.payload = msg.payload.level3_status;\nglobal.set(\"WD3\", l3_msg.payload);\n\n\n\nreturnArray[0] = pH_msg;\nreturnArray[1] = temp_msg;\nreturnArray[2] = l1_msg;\nreturnArray[3] = l2_msg;\nreturnArray[4] = l3_msg;\n\n\nreturn returnArray;",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 140,
        "wires": [
            [
                "1f7c50c5d6e7d504",
                "80b357c10add4706"
            ],
            [
                "1ec4f6d30b9ae0fd"
            ],
            [
                "95b336cfdb499b25"
            ],
            [
                "95b336cfdb499b25"
            ],
            [
                "95b336cfdb499b25"
            ]
        ]
    },
    {
        "id": "de1f6b2b37e837cb",
        "type": "ui_gauge",
        "z": "16c561d0bd2db4f4",
        "name": "",
        "group": "7b9307d1947a13f0",
        "order": 2,
        "width": "8",
        "height": "5",
        "gtype": "wave",
        "title": "WashLevel",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "3",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1890,
        "y": 180,
        "wires": []
    },
    {
        "id": "e00268bdbe39dfbb",
        "type": "function",
        "z": "16c561d0bd2db4f4",
        "name": "Splits Topics into respective Outputs",
        "func": "var index;\nvar numOutputs = node.numberOfOutputs;\n\nconst returnArray = new Array(numOutputs).fill(null);\n\nvar topic1 = global.get('Topic_WashDigestion');\nvar topic2 = global.get('Topic_Cementation');\nvar topic3 = global.get('Topic_Electrowinning');\nvar topic4 = global.get('Topic_OxPrecipitation');\nvar topic5 = global.get('Topic_BufferTank');\n\nif (msg.topic == topic1){\n    index = 0;\n}\n\nif (msg.topic == topic2){\n    index = 1;\n}\n\nif (msg.topic == topic3){\n    index = 2;\n}\n\nif (msg.topic == topic4) {\n    index = 3;\n}\n\nif (msg.topic == topic5) {\n    index = 4;\n}\n\nreturnArray[index] = msg;\n\nreturn returnArray;",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 420,
        "wires": [
            [
                "81f1b85473dca332"
            ],
            [
                "e2fa88ae572257fc"
            ],
            [
                "a3d6ef1090b37a6d"
            ],
            [
                "151bafda4bc2a7be"
            ],
            [
                "9181c831def27233"
            ]
        ]
    },
    {
        "id": "0b960201cdf08554",
        "type": "OpcUa-Item",
        "z": "16c561d0bd2db4f4",
        "item": "ns=4;s=Cementation",
        "datatype": "String",
        "value": "",
        "name": "",
        "x": 240,
        "y": 340,
        "wires": [
            [
                "afe589e21d33a821"
            ]
        ]
    },
    {
        "id": "afe589e21d33a821",
        "type": "function",
        "z": "16c561d0bd2db4f4",
        "name": "assign Cementation to topic",
        "func": "var msg_Cementation = {};\nmsg_Cementation.topic = msg.topic;\n\n//See node above for what goes on here.\nglobal.set(\"Topic_Cementation\", String(msg_Cementation.topic)); \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 340,
        "wires": [
            [
                "ee3a6572681df942"
            ]
        ]
    },
    {
        "id": "e2fa88ae572257fc",
        "type": "function",
        "z": "16c561d0bd2db4f4",
        "name": "TankData Splitter",
        "func": "var pH_msg = {};\nvar temp_msg = {};\nvar l1_msg = {};\nvar l2_msg = {};\nvar l3_msg = {};\n\nvar totalOutputs = 7;\n\nconst returnArray = new Array(totalOutputs).fill(null);\n\npH_msg.payload = Math.round((msg.payload.pH) * 100) / 100;\nglobal.set(\"Temp1\", msg.payload);\n\ntemp_msg.payload = Math.round((msg.payload.temperature) * 100) / 100;\nglobal.set(\"Temp1\", msg.payload);\n\nl1_msg.payload = msg.payload.level1_status;\nglobal.set(\"C1\", l1_msg.payload);\nl2_msg.payload = msg.payload.level2_status;\nglobal.set(\"C2\", l2_msg.payload);\nl3_msg.payload = msg.payload.level3_status;\nglobal.set(\"C3\", l3_msg.payload);\n\n\nreturnArray[0] = pH_msg;\nreturnArray[1] = temp_msg;\nreturnArray[2] = l1_msg;\nreturnArray[3] = l2_msg;\nreturnArray[4] = l3_msg;\n\n\nreturn returnArray;",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 420,
        "wires": [
            [
                "7ede4545d9136513",
                "92dec648efba38d7"
            ],
            [
                "78480f23928b4b2f"
            ],
            [
                "e6671fa9cbcaaae5"
            ],
            [
                "e6671fa9cbcaaae5"
            ],
            [
                "e6671fa9cbcaaae5"
            ]
        ]
    },
    {
        "id": "7ede4545d9136513",
        "type": "ui_chart",
        "z": "16c561d0bd2db4f4",
        "name": "",
        "group": "3342ef65ea84e0bc",
        "order": 2,
        "width": "8",
        "height": "4",
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "14",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#dd2727",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1690,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "92dec648efba38d7",
        "type": "ui_text",
        "z": "16c561d0bd2db4f4",
        "group": "3342ef65ea84e0bc",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "pH:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 1690,
        "y": 380,
        "wires": []
    },
    {
        "id": "33c6fb9ca60141ee",
        "type": "OpcUa-Item",
        "z": "16c561d0bd2db4f4",
        "item": "ns=4;s=Electrowinning",
        "datatype": "String",
        "value": "",
        "name": "",
        "x": 240,
        "y": 380,
        "wires": [
            [
                "db94b881ae88641e"
            ]
        ]
    },
    {
        "id": "db94b881ae88641e",
        "type": "function",
        "z": "16c561d0bd2db4f4",
        "name": "assign Electrowinning to topic",
        "func": "var msg_Electrowinning = {};\nmsg_Electrowinning.topic = msg.topic;\n\n//See node above for what goes on here.\nglobal.set(\"Topic_Electrowinning\", String(msg_Electrowinning.topic)); \n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 380,
        "wires": [
            [
                "ee3a6572681df942"
            ]
        ]
    },
    {
        "id": "c4defabd3506a705",
        "type": "ui_chart",
        "z": "16c561d0bd2db4f4",
        "name": "",
        "group": "3342ef65ea84e0bc",
        "order": 2,
        "width": "8",
        "height": "4",
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "14",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#dd2727",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1690,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "1b64da6bc3b25e64",
        "type": "ui_text",
        "z": "16c561d0bd2db4f4",
        "group": "3342ef65ea84e0bc",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "pH:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 1690,
        "y": 660,
        "wires": []
    },
    {
        "id": "33870d5dbfab317a",
        "type": "OpcUa-Item",
        "z": "16c561d0bd2db4f4",
        "item": "ns=4;s=OxPrecipitation",
        "datatype": "String",
        "value": "",
        "name": "",
        "x": 240,
        "y": 420,
        "wires": [
            [
                "e4ea460878da2adb"
            ]
        ]
    },
    {
        "id": "e4ea460878da2adb",
        "type": "function",
        "z": "16c561d0bd2db4f4",
        "name": "assign OxPrecipitation to topic",
        "func": "var msg_OxPrecipitation = {};\nmsg_OxPrecipitation.topic = msg.topic;\n\n//See node above for what goes on here.\nglobal.set(\"Topic_OxPrecipitation\", String(msg_OxPrecipitation.topic)); \n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 420,
        "wires": [
            [
                "ee3a6572681df942"
            ]
        ]
    },
    {
        "id": "0362f989e57b35f6",
        "type": "ui_chart",
        "z": "16c561d0bd2db4f4",
        "name": "",
        "group": "3342ef65ea84e0bc",
        "order": 2,
        "width": "8",
        "height": "4",
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "14",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#dd2727",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1690,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "daa274e0f092d927",
        "type": "ui_text",
        "z": "16c561d0bd2db4f4",
        "group": "3342ef65ea84e0bc",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "pH:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 1690,
        "y": 920,
        "wires": []
    },
    {
        "id": "4dfb0f8ea148f7d7",
        "type": "OpcUa-Item",
        "z": "16c561d0bd2db4f4",
        "item": "ns=4;s=BufferTank",
        "datatype": "String",
        "value": "",
        "name": "",
        "x": 240,
        "y": 460,
        "wires": [
            [
                "d97589088e7526f6"
            ]
        ]
    },
    {
        "id": "d97589088e7526f6",
        "type": "function",
        "z": "16c561d0bd2db4f4",
        "name": "assign BufferTank to topic",
        "func": "var msg_OxPrecipitation = {};\nmsg_OxPrecipitation.topic = msg.topic;\n\n//See node above for what goes on here.\nglobal.set(\"Topic_OxPrecipitation\", String(msg_OxPrecipitation.topic)); \n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 460,
        "wires": [
            [
                "ee3a6572681df942"
            ]
        ]
    },
    {
        "id": "4e61426d7b7a4494",
        "type": "ui_chart",
        "z": "16c561d0bd2db4f4",
        "name": "",
        "group": "3342ef65ea84e0bc",
        "order": 2,
        "width": "8",
        "height": "4",
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "14",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#dd2727",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1690,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "0acdb8c3f4f7bdf1",
        "type": "ui_text",
        "z": "16c561d0bd2db4f4",
        "group": "3342ef65ea84e0bc",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "pH:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 1690,
        "y": 1180,
        "wires": []
    },
    {
        "id": "0e23fee8fd55db68",
        "type": "comment",
        "z": "16c561d0bd2db4f4",
        "name": "Wash Digestion",
        "info": "",
        "x": 1480,
        "y": 60,
        "wires": []
    },
    {
        "id": "c28f6bb3398809f9",
        "type": "comment",
        "z": "16c561d0bd2db4f4",
        "name": "Cementation",
        "info": "",
        "x": 1470,
        "y": 340,
        "wires": []
    },
    {
        "id": "c8b5ed30eaae03f6",
        "type": "comment",
        "z": "16c561d0bd2db4f4",
        "name": "Electrowinning",
        "info": "",
        "x": 1480,
        "y": 620,
        "wires": []
    },
    {
        "id": "98825de087caf9b5",
        "type": "comment",
        "z": "16c561d0bd2db4f4",
        "name": "Oxidation Precipitation",
        "info": "",
        "x": 1480,
        "y": 880,
        "wires": []
    },
    {
        "id": "c34cf7e4b85e61d6",
        "type": "comment",
        "z": "16c561d0bd2db4f4",
        "name": "Buffer Tank",
        "info": "",
        "x": 1440,
        "y": 1140,
        "wires": []
    },
    {
        "id": "95b336cfdb499b25",
        "type": "function",
        "z": "16c561d0bd2db4f4",
        "name": "levelReporter",
        "func": "var WD_1 = global.get('WD1');\nvar WD_2 = global.get('WD2');\nvar WD_3 = global.get('WD3');\n\nif (WD_3 == true){\n    msg.payload = 3;\n} else if (WD_2 == true) {\n    msg.payload = 2;\n} else if (WD_1 == true) {\n    msg.payload = 1;\n} else {\n    msg.payload = 0;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 180,
        "wires": [
            [
                "de1f6b2b37e837cb"
            ]
        ]
    },
    {
        "id": "3480f2c9558d5432",
        "type": "ui_gauge",
        "z": "16c561d0bd2db4f4",
        "name": "",
        "group": "7b9307d1947a13f0",
        "order": 2,
        "width": "8",
        "height": "5",
        "gtype": "wave",
        "title": "cementationLevel",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "3",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1910,
        "y": 460,
        "wires": []
    },
    {
        "id": "e6671fa9cbcaaae5",
        "type": "function",
        "z": "16c561d0bd2db4f4",
        "name": "levelReporter",
        "func": "var level1 = global.get('C1');\nvar level2 = global.get('C2');\nvar level3 = global.get('C3');\n\nif (level3 == true){\n    msg.payload = 3;\n} else if (level2 == true) {\n    msg.payload = 2;\n} else if (level1 == true) {\n    msg.payload = 1;\n} else {\n    msg.payload = 0;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 460,
        "wires": [
            [
                "3480f2c9558d5432"
            ]
        ]
    },
    {
        "id": "a3d6ef1090b37a6d",
        "type": "function",
        "z": "16c561d0bd2db4f4",
        "name": "TankData Splitter",
        "func": "var pH_msg = {};\nvar temp_msg = {};\nvar l1_msg = {};\nvar l2_msg = {};\nvar l3_msg = {};\n\nvar totalOutputs = 7;\n\nconst returnArray = new Array(totalOutputs).fill(null);\n\npH_msg.payload = Math.round((msg.payload.pH) * 100) / 100;\nglobal.set(\"Temp1\", msg.payload);\n\ntemp_msg.payload = Math.round((msg.payload.temperature) * 100) / 100;\nglobal.set(\"Temp1\", msg.payload);\n\nl1_msg.payload = msg.payload.level1_status;\nglobal.set(\"EW1\", l1_msg.payload);\nl2_msg.payload = msg.payload.level2_status;\nglobal.set(\"EW2\", l2_msg.payload);\nl3_msg.payload = msg.payload.level3_status;\nglobal.set(\"EW3\", l3_msg.payload);\n\n\nreturnArray[0] = pH_msg;\nreturnArray[1] = temp_msg;\nreturnArray[2] = l1_msg;\nreturnArray[3] = l2_msg;\nreturnArray[4] = l3_msg;\n\n\nreturn returnArray;",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 700,
        "wires": [
            [
                "c4defabd3506a705",
                "1b64da6bc3b25e64"
            ],
            [
                "3d63a9e19229a6e2"
            ],
            [
                "3d317cd75df892bf"
            ],
            [
                "3d317cd75df892bf"
            ],
            [
                "3d317cd75df892bf"
            ]
        ]
    },
    {
        "id": "151bafda4bc2a7be",
        "type": "function",
        "z": "16c561d0bd2db4f4",
        "name": "TankData Splitter",
        "func": "var pH_msg = {};\nvar temp_msg = {};\nvar l1_msg = {};\nvar l2_msg = {};\nvar l3_msg = {};\n\nvar totalOutputs = 7;\n\nconst returnArray = new Array(totalOutputs).fill(null);\n\npH_msg.payload = Math.round((msg.payload.pH) * 100) / 100;\nglobal.set(\"Temp1\", msg.payload);\n\ntemp_msg.payload = Math.round((msg.payload.temperature) * 100) / 100;\nglobal.set(\"Temp1\", msg.payload);\n\nl1_msg.payload = msg.payload.level1_status;\nglobal.set(\"O1\", l1_msg.payload);\nl2_msg.payload = msg.payload.level2_status;\nglobal.set(\"O2\", l2_msg.payload);\nl3_msg.payload = msg.payload.level3_status;\nglobal.set(\"O3\", l3_msg.payload);\n\n\nreturnArray[0] = pH_msg;\nreturnArray[1] = temp_msg;\nreturnArray[2] = l1_msg;\nreturnArray[3] = l2_msg;\nreturnArray[4] = l3_msg;\n\n\nreturn returnArray;",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 960,
        "wires": [
            [
                "daa274e0f092d927",
                "0362f989e57b35f6"
            ],
            [
                "4185f9e46ff1786f"
            ],
            [
                "220daed9ec04b7a6"
            ],
            [
                "220daed9ec04b7a6"
            ],
            [
                "220daed9ec04b7a6"
            ]
        ]
    },
    {
        "id": "9181c831def27233",
        "type": "function",
        "z": "16c561d0bd2db4f4",
        "name": "TankData Splitter",
        "func": "var pH_msg = {};\nvar temp_msg = {};\nvar l1_msg = {};\nvar l2_msg = {};\nvar l3_msg = {};\n\nvar totalOutputs = 7;\n\nconst returnArray = new Array(totalOutputs).fill(null);\n\npH_msg.payload = Math.round((msg.payload.pH) * 100) / 100;\nglobal.set(\"Temp1\", msg.payload);\n\ntemp_msg.payload = Math.round((msg.payload.temperature) * 100) / 100;\nglobal.set(\"Temp1\", msg.payload);\n\nl1_msg.payload = msg.payload.level1_status;\nglobal.set(\"B1\", l1_msg.payload);\nl2_msg.payload = msg.payload.level2_status;\nglobal.set(\"B2\", l2_msg.payload);\nl3_msg.payload = msg.payload.level3_status;\nglobal.set(\"B3\", l3_msg.payload);\n\n\nreturnArray[0] = pH_msg;\nreturnArray[1] = temp_msg;\nreturnArray[2] = l1_msg;\nreturnArray[3] = l2_msg;\nreturnArray[4] = l3_msg;\n\n\nreturn returnArray;",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 1220,
        "wires": [
            [
                "0acdb8c3f4f7bdf1",
                "4e61426d7b7a4494"
            ],
            [
                "9c8ccb1b4f14e4c6"
            ],
            [
                "b008863c8c5f1438"
            ],
            [
                "b008863c8c5f1438"
            ],
            [
                "b008863c8c5f1438"
            ]
        ]
    },
    {
        "id": "2f3aabcc94b47677",
        "type": "ui_gauge",
        "z": "16c561d0bd2db4f4",
        "name": "",
        "group": "7b9307d1947a13f0",
        "order": 2,
        "width": "8",
        "height": "5",
        "gtype": "wave",
        "title": "EW Level",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "3",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1880,
        "y": 740,
        "wires": []
    },
    {
        "id": "b1fd7d57b2f1a360",
        "type": "ui_gauge",
        "z": "16c561d0bd2db4f4",
        "name": "",
        "group": "7b9307d1947a13f0",
        "order": 2,
        "width": "8",
        "height": "5",
        "gtype": "wave",
        "title": "Oxidation Level",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "3",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1900,
        "y": 1000,
        "wires": []
    },
    {
        "id": "26ba799db6cc1c30",
        "type": "ui_gauge",
        "z": "16c561d0bd2db4f4",
        "name": "",
        "group": "7b9307d1947a13f0",
        "order": 2,
        "width": "8",
        "height": "5",
        "gtype": "wave",
        "title": "Buffer",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "3",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1870,
        "y": 1260,
        "wires": []
    },
    {
        "id": "3d317cd75df892bf",
        "type": "function",
        "z": "16c561d0bd2db4f4",
        "name": "levelReporter",
        "func": "var level1 = global.get('EW1');\nvar level2 = global.get('EW2');\nvar level3 = global.get('EW3');\n\nif (level3 == true){\n    msg.payload = 3;\n} else if (level2 == true) {\n    msg.payload = 2;\n} else if (level1 == true) {\n    msg.payload = 1;\n} else {\n    msg.payload = 0;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 740,
        "wires": [
            [
                "2f3aabcc94b47677"
            ]
        ]
    },
    {
        "id": "220daed9ec04b7a6",
        "type": "function",
        "z": "16c561d0bd2db4f4",
        "name": "levelReporter",
        "func": "var level1 = global.get('O1');\nvar level2 = global.get('O2');\nvar level3 = global.get('O3');\n\nif (level3 == true){\n    msg.payload = 3;\n} else if (level2 == true) {\n    msg.payload = 2;\n} else if (level1 == true) {\n    msg.payload = 1;\n} else {\n    msg.payload = 0;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 1000,
        "wires": [
            [
                "b1fd7d57b2f1a360"
            ]
        ]
    },
    {
        "id": "b008863c8c5f1438",
        "type": "function",
        "z": "16c561d0bd2db4f4",
        "name": "levelReporter",
        "func": "var level1 = global.get('B1');\nvar level2 = global.get('B2');\nvar level3 = global.get('B3');\n\nif (level3 == true){\n    msg.payload = 3;\n} else if (level2 == true) {\n    msg.payload = 2;\n} else if (level1 == true) {\n    msg.payload = 1;\n} else {\n    msg.payload = 0;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 1260,
        "wires": [
            [
                "26ba799db6cc1c30"
            ]
        ]
    },
    {
        "id": "78480f23928b4b2f",
        "type": "ui_chart",
        "z": "16c561d0bd2db4f4",
        "name": "",
        "group": "7b9307d1947a13f0",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "10000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1690,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "1ec4f6d30b9ae0fd",
        "type": "ui_chart",
        "z": "16c561d0bd2db4f4",
        "name": "",
        "group": "7b9307d1947a13f0",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "10000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1690,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "3d63a9e19229a6e2",
        "type": "ui_chart",
        "z": "16c561d0bd2db4f4",
        "name": "",
        "group": "7b9307d1947a13f0",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "10000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1690,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "4185f9e46ff1786f",
        "type": "ui_chart",
        "z": "16c561d0bd2db4f4",
        "name": "",
        "group": "7b9307d1947a13f0",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "10000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1690,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "9c8ccb1b4f14e4c6",
        "type": "ui_chart",
        "z": "16c561d0bd2db4f4",
        "name": "",
        "group": "7b9307d1947a13f0",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "10000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1690,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "c0eaa1e3.932c2",
        "type": "inject",
        "z": "41ec38ad59c0cf49",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 180,
        "wires": [
            [
                "ed28c584.34a4a8"
            ]
        ]
    },
    {
        "id": "31b99d4b.895742",
        "type": "exec",
        "z": "41ec38ad59c0cf49",
        "command": "ffmpeg -y -i rtsp://admin:zinc23@192.168.1.67:554/ch01/1 -vframes 1 -f image2pipe -vcodec png -",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Grab a frame->stdout",
        "x": 546.4999923706055,
        "y": 138.25,
        "wires": [
            [
                "2d96cf3d.0dffe"
            ],
            [],
            []
        ]
    },
    {
        "id": "2f7c77bd.2eeae8",
        "type": "function",
        "z": "41ec38ad59c0cf49",
        "name": "Statistics",
        "func": "var now = new Date();\nvar stat = context.get(\"stat\");\nif (stat===undefined) {\n    // Initialize the object in case NR restart\n    stat = { \"count\": 0, \"success\": 0, \"rate\": 0.0, \"last\": now};\n}\nif (msg.topic===\"reset\") {\n    // Reset message was received: reset statistics\n    stat = { \"count\": 0, \"success\": 0, \"rate\": 0.0, \"last\": now};\n} else {\n    // Update statistics\n    stat.count++;\n    if (msg.payload.code===0) {\n        stat.success++;\n    }    \n    stat.rate=stat.success/stat.count;\n    stat.last=now;\n}\n\n// Create formatted time\nvar yyyy = now.getFullYear();\nvar mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\nvar dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\nvar hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\nvar mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\nvar ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\n\nmsg.formattedtime = dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss;\nmsg.success = stat.success;\nmsg.rate = Math.floor(stat.rate*100);\n\nnode.status({fill:\"blue\",shape:\"ring\",text:\"Frames: \"+msg.success+\" | \"+msg.rate+\"% | Last update: \"+dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss});\n\n\n// Saving data in the context\ncontext.set(\"stat\",stat);\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 727.9999847412109,
        "y": 330.25,
        "wires": [
            [
                "122d531a.410bcd",
                "47913bc9.420b84",
                "5f987014.e8cba"
            ]
        ]
    },
    {
        "id": "b1f8f75e.c82c88",
        "type": "inject",
        "z": "41ec38ad59c0cf49",
        "name": "Reset stat",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "reset",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 320,
        "wires": [
            [
                "99bfd7f8.6e8f78"
            ]
        ]
    },
    {
        "id": "122d531a.410bcd",
        "type": "ui_text",
        "z": "41ec38ad59c0cf49",
        "group": "e16e06ca.f38438",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Last time",
        "label": "Last grab",
        "format": "{{msg.formattedtime}}",
        "layout": "row-spread",
        "x": 929.0000686645508,
        "y": 250.64999198913574,
        "wires": []
    },
    {
        "id": "47913bc9.420b84",
        "type": "ui_text",
        "z": "41ec38ad59c0cf49",
        "group": "e16e06ca.f38438",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Frame count",
        "label": "Frames grabbed",
        "format": "{{msg.success}}",
        "layout": "row-spread",
        "x": 938.899974822998,
        "y": 286.4499807357788,
        "wires": []
    },
    {
        "id": "5f987014.e8cba",
        "type": "ui_text",
        "z": "41ec38ad59c0cf49",
        "group": "e16e06ca.f38438",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Success rate",
        "label": "Success rate",
        "format": "{{msg.rate}} %",
        "layout": "row-spread",
        "x": 939.8999481201172,
        "y": 324.4499740600586,
        "wires": []
    },
    {
        "id": "3bccc648.4f364a",
        "type": "ui_button",
        "z": "41ec38ad59c0cf49",
        "name": "Refresh",
        "group": "675036dd.603328",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Refresh image",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 120,
        "y": 380,
        "wires": [
            [
                "459f7922.af9ee8"
            ]
        ]
    },
    {
        "id": "14f4f2e2.2bf82d",
        "type": "comment",
        "z": "41ec38ad59c0cf49",
        "name": "Frame grabber",
        "info": "This section of the flow is responsible for \ngrabbing a single out of the RTSP feed of the IP\nCamera. It uses avconv to do that which is part\nof the libav-tools for raspberry pi.\n\nThe trigger can be an inject, or a UI button.\nThe statistic node keeps a track of the number of\ngrabbed frames and the success rate (when the\nvideo conversion/grabbing was successful). The \nStatistic node also has a reset input which can \nbe used to periodically reset the stats (e.g.\ndaily, weekly).\n\nI directed the second output of the Exec node to\na file, as the output of the avconv is usually \nquite long and if there are errors you don't\nsee the entire output in the debug window, so in\nthat case just open to output and see what the issue\nis.",
        "x": 108.62501525878906,
        "y": 84.00000762939453,
        "wires": []
    },
    {
        "id": "ed28c584.34a4a8",
        "type": "change",
        "z": "41ec38ad59c0cf49",
        "name": "Set filename",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "C:\\\\Users\\\\Samon\\\\node-red-static\\\\grab.jpg",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 298,
        "y": 193,
        "wires": [
            [
                "9ce138d8.f118c8",
                "31b99d4b.895742"
            ]
        ]
    },
    {
        "id": "6eba2f2f.5e0f",
        "type": "template",
        "z": "41ec38ad59c0cf49",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<img width=\"320px\" height=\"200px\" src=\"data:image/jpg;base64,{{{payload}}}\">",
        "output": "str",
        "x": 739.9999961853027,
        "y": 197.25000190734863,
        "wires": [
            [
                "dd3172bd.6a821"
            ]
        ]
    },
    {
        "id": "dd3172bd.6a821",
        "type": "ui_template",
        "z": "41ec38ad59c0cf49",
        "group": "675036dd.603328",
        "name": "",
        "order": 1,
        "width": "6",
        "height": "5",
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 926,
        "y": 210.75000095367432,
        "wires": [
            []
        ]
    },
    {
        "id": "2d96cf3d.0dffe",
        "type": "base64",
        "z": "41ec38ad59c0cf49",
        "name": "",
        "action": "str",
        "property": "payload",
        "x": 760,
        "y": 120,
        "wires": [
            [
                "6eba2f2f.5e0f"
            ]
        ]
    },
    {
        "id": "9ce138d8.f118c8",
        "type": "exec",
        "z": "41ec38ad59c0cf49",
        "command": "ffmpeg -y -i rtsp://admin:zinc23@192.168.1.67:554/ch01/1 -vframes 1 -qscale:v 2",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Grab a frame -> jpg",
        "x": 537.9999847412109,
        "y": 255.25,
        "wires": [
            [],
            [],
            [
                "2f7c77bd.2eeae8"
            ]
        ]
    },
    {
        "id": "a5e46029.81ba4",
        "type": "watch",
        "z": "41ec38ad59c0cf49",
        "name": "",
        "files": "C:\\\\Users\\\\Samon\\\\node-red-static\\\\grab.jpg",
        "recursive": "",
        "x": 670,
        "y": 440,
        "wires": [
            [
                "7081ec93.98cfa4"
            ]
        ]
    },
    {
        "id": "7081ec93.98cfa4",
        "type": "ui_text",
        "z": "41ec38ad59c0cf49",
        "group": "675036dd.603328",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "File Size",
        "label": "grab.jpg",
        "format": "{{msg.size}} kb",
        "layout": "row-spread",
        "x": 940,
        "y": 440,
        "wires": []
    },
    {
        "id": "459f7922.af9ee8",
        "type": "function",
        "z": "41ec38ad59c0cf49",
        "name": "Frame grab",
        "func": "var now = new Date();\n// Create formatted time\nvar yyyy = now.getFullYear();\nvar mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\nvar dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\nvar hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\nvar mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\nvar ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\n\n// Last update: \"+dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss});\n\n// file path with / at the end\nvar path = \"C:\\\\Users\\\\Samon\\\\node-red-static\\\\\";                     // This is the path\nvar filename = \"frame_\"+yyyy+mm+dd+\"-\"+hh+mm+ss+\".jpg\";     // file name\nmsg.payload = path + filename;                              // pass the full path to payload for the exec node to add to the end of the command\nmsg.file = filename;                                        // To be used later to store the information in the DB\nmsg.path = path;                                            // Same as above\nmsg.wwwpath = \"/\";                                          // Same as above\nmsg.topic = \"store\";                                        // Flag to store this image in the DB\nmsg.type = \"timelapse\";                                     // Image type e.g. Front camera, etc.\nmsg.epoch = now.getTime();                                  // Current timestamp\nmsg.formatteddate = dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss;   // Formatted timestamp to be used later\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 380,
        "wires": [
            [
                "9ce138d8.f118c8",
                "54d35cc4.46d474"
            ]
        ]
    },
    {
        "id": "54d35cc4.46d474",
        "type": "ui_text_input",
        "z": "41ec38ad59c0cf49",
        "name": "",
        "label": "Snapshot",
        "tooltip": "",
        "group": "675036dd.603328",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "",
        "topicType": "str",
        "x": 930,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "31689e41.17fd82",
        "type": "ui_button",
        "z": "41ec38ad59c0cf49",
        "name": "Reset",
        "group": "e16e06ca.f38438",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 110,
        "y": 280,
        "wires": [
            [
                "99bfd7f8.6e8f78"
            ]
        ]
    },
    {
        "id": "99bfd7f8.6e8f78",
        "type": "function",
        "z": "41ec38ad59c0cf49",
        "name": "Reset",
        "func": "msg.topic = 'reset';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 340,
        "wires": [
            [
                "2f7c77bd.2eeae8"
            ]
        ]
    }
]